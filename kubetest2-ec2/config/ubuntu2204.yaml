#cloud-config
# This bootstraps a public ubuntu 2204 image from scratch.
system_info:
  default_user:
    name: ec2-user
    groups: root
package_upgrade: true
package_update: true
packages:
    - nfs-common
    - socat
    - conntrack
    - awscli
    - net-tools
    - jq
    - python3
write_files:
  - path: /tmp/bootstrap/extra-fetches.yaml
    content: |
      # valid keys are containerd-env, and extra_init
      containerd-env: https://raw.githubusercontent.com/kubernetes/test-infra/master/jobs/e2e_node/containerd/containerd-main/env
  - path: /etc/systemd/system/containerd-installation.service
    permissions: 0644
    owner: root
    content: |
      # installed by cloud-init
      [Unit]
      Description=Download and install containerd binaries and configurations.
      After=network-online.target
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      ExecStartPre=/bin/chmod 544 /home/containerd/configure.sh
      ExecStart=/home/containerd/configure.sh
      [Install]
      WantedBy=containerd.target
  - path: /etc/systemd/system/containerd.service
    permissions: 0644
    owner: root
    content: |
      # installed by cloud-init
      [Unit]
      Description=containerd container runtime
      Documentation=https://containerd.io
      After=containerd-installation.service
      [Service]
      Restart=always
      RestartSec=5
      Delegate=yes
      KillMode=process
      OOMScoreAdjust=-999
      LimitNOFILE=1048576
      # Having non-zero Limit*s causes performance problems due to accounting overhead
      # in the kernel. We recommend using cgroups to do container-local accounting.
      LimitNPROC=infinity
      LimitCORE=infinity
      TasksMax=infinity
      ExecStartPre=/sbin/modprobe overlay
      ExecStart=/home/containerd/usr/local/bin/containerd
      [Install]
      WantedBy=containerd.target
  - path: /etc/systemd/system/containerd.target
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=Containerd
      [Install]
      WantedBy=multi-user.target
  - path: /etc/sysctl.d/k8s.conf
    permissions: 0644
    owner: root
    content: |
      net.ipv4.ip_forward=1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
  - path: /etc/kubernetes/credential-provider.yaml
    permissions: 0644
    owner: root
    content: |
      kind: CredentialProviderConfig
      apiVersion: kubelet.config.k8s.io/v1
      providers:
      - name: ecr-credential-provider
        apiVersion: credentialprovider.kubelet.k8s.io/v1
        matchImages:
        - "*.dkr.ecr.*.amazonaws.com"
        - "*.dkr.ecr.*.amazonaws.com.cn"
        - "*.dkr.ecr-fips.*.amazonaws.com"
        - "*.dkr.ecr.us-iso-east-1.c2s.ic.gov"
        - "*.dkr.ecr.us-isob-east-1.sc2s.sgov.gov"
        defaultCacheDuration: 12h
  - path: /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
    permissions: 0644
    owner: root
    content: |
      # Note: This dropin only works with kubeadm and kubelet v1.11+
      [Service]
      Environment="KUBELET_EXTRA_ARGS=--image-credential-provider-bin-dir=/usr/local/bin --image-credential-provider-config=/etc/kubernetes/credential-provider.yaml"
      Environment="KUBELET_KUBECONFIG_ARGS=--bootstrap-kubeconfig=/etc/kubernetes/bootstrap-kubelet.conf --kubeconfig=/etc/kubernetes/kubelet.conf"
      Environment="KUBELET_CONFIG_ARGS=--config=/var/lib/kubelet/config.yaml"
      # This is a file that "kubeadm init" and "kubeadm join" generates at runtime, populating the KUBELET_KUBEADM_ARGS variable dynamically
      EnvironmentFile=-/var/lib/kubelet/kubeadm-flags.env
      # This is a file that the user can use for overrides of the kubelet args as a last resort. Preferably, the user should use
      # the .NodeRegistration.KubeletExtraArgs object in the configuration files instead. KUBELET_EXTRA_ARGS should be sourced from this file.
      EnvironmentFile=-/etc/default/kubelet
      ExecStart=
      ExecStart=/usr/local/bin/kubelet $KUBELET_KUBECONFIG_ARGS $KUBELET_CONFIG_ARGS $KUBELET_KUBEADM_ARGS $KUBELET_EXTRA_ARGS
  - path: /usr/lib/systemd/system/kubelet.service
    permissions: 0644
    owner: root
    content: |
      [Unit]
      Description=kubelet: The Kubernetes Node Agent
      Documentation=https://kubernetes.io/docs/home/
      Wants=network-online.target
      After=network-online.target

      [Service]
      ExecStart=/usr/local/bin/kubelet
      Restart=always
      StartLimitInterval=0
      RestartSec=10

      [Install]
      WantedBy=multi-user.target
  - path: /usr/local/bin/run-kubeadm.sh
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash
      set -xeu

      if [ "$(uname -m)" = "arm64" ] || [ "$(uname -m)" = "aarch64" ]; then
        ARCH=arm64
      else
        ARCH=amd64
      fi

      VERSION="v1.27.1"
      curl -sSLo /usr/local/bin/ecr-credential-provider --fail --retry 5 https://artifacts.k8s.io/binaries/cloud-provider-aws/$VERSION/linux/$ARCH/ecr-credential-provider-linux-$ARCH
      chmod +x /usr/local/bin/ecr-credential-provider

      aws s3 cp s3://{{STAGING_BUCKET}}/{{STAGING_VERSION}}/kubernetes-server-linux-$ARCH.tar.gz kubernetes-server-linux-$ARCH.tar.gz --no-sign-request

      tar -xvzf kubernetes-server-linux-$ARCH.tar.gz
      sudo cp ./kubernetes/server/bin/* /usr/local/bin/

      VERSION="v1.27.1"
      curl -sSL --fail --retry 5 https://storage.googleapis.com/k8s-artifacts-cri-tools/release/$VERSION/crictl-$VERSION-linux-$ARCH.tar.gz | sudo tar -xvzf - -C /usr/local/bin

      sudo modprobe br_netfilter
      sudo sysctl --system
      sudo systemctl daemon-reload && sudo systemctl restart kubelet

      sudo ln -s /home/containerd/usr/local/bin/ctr /usr/local/bin/ctr || true
      find . -name *.tar | xargs -L 1 ctr -n k8s.io images import

      ctr -n k8s.io images ls -q | grep -e $ARCH | xargs -L 1 -I '{}' /bin/bash -c 'ctr -n k8s.io images tag "{}" "$(echo "{}" | sed s/-'$ARCH':/:/)"'

      # {{KUBEADM_CONTROL_PLANE}} should be "true" or "false"
      KUBEADM_CONTROL_PLANE={{KUBEADM_CONTROL_PLANE}}
      if [[ ${KUBEADM_CONTROL_PLANE} == true ]]; then
        MAC=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/ -s | head -n 1)
        CIDR=$(curl -s http://169.254.169.254/latest/meta-data/network/interfaces/macs/$MAC/vpc-ipv4-cidr-blocks)

        sudo kubeadm init \
         --token {{KUBEADM_TOKEN}} \
         --apiserver-cert-extra-sans $(curl -4 icanhazip.com) \
         --cri-socket /run/containerd/containerd.sock \
         --kubernetes-version=$(kubelet --version | awk '{print $2}') \
         --ignore-preflight-errors=ImagePull \
         --pod-network-cidr="$CIDR"
      else
        sudo kubeadm join \
         --v 10 \
         --token {{KUBEADM_TOKEN}} \
         --discovery-token-unsafe-skip-ca-verification \
         {{KUBEADM_CONTROL_PLANE_IP}}:6443
      fi
  - path: /usr/local/bin/run-post-install.sh
    permissions: 0755
    owner: root
    content: |
      #!/bin/bash
      set -xeu

      KUBEADM_CONTROL_PLANE={{KUBEADM_CONTROL_PLANE}}
      if [[ ${KUBEADM_CONTROL_PLANE} == true ]]; then
        kubectl --kubeconfig /etc/kubernetes/admin.conf create -f https://raw.githubusercontent.com/aws/amazon-vpc-cni-k8s/v1.13.4/config/master/aws-k8s-cni.yaml
      fi
  - path: /home/containerd/configure.sh
    encoding: gzip+base64
    content: {{CONFIGURE_SH}}
    owner: root
    permissions: '0544'
runcmd:
  - sudo systemctl stop apparmor
  - sudo systemctl disable apparmor
  # Ensure instance-id resolves to the ip address of the host
  - "echo \"$(dig $(curl -s -f -m 1 http://169.254.169.254/latest/meta-data/instance-id/).ec2.internal +short) $(curl -s -f -m 1 http://169.254.169.254/latest/meta-data/instance-id/)\" | sudo tee -a /etc/hosts"
  - "sudo sed -i \"s/^#ReadEtcHosts/ReadEtcHosts/\" /etc/systemd/resolved.conf"
  - sudo systemctl restart systemd-resolved
  - sudo rm /usr/lib/systemd/logind.conf.d/unattended-upgrades-logind-maxdelay.conf
  - sudo systemctl restart systemd-logind
  # Stop the existing containerd service if there is one. (for Docker 18.09+)
  - systemctl is-active containerd && systemctl stop containerd
  - systemctl daemon-reload
  - systemctl enable containerd-installation.service
  - systemctl enable containerd.service
  - systemctl enable containerd.target
  - systemctl start containerd.target
  - /usr/local/bin/run-kubeadm.sh
  - /usr/local/bin/run-post-install.sh
